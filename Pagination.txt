In questo blocco di codice vediamo come gestire la paginazione della nostra
collection books all interno del database bookstore

Vengono utilizzati i metodi .skip() e .limit()
che vengono direttamente scritti come delle query all interno di un applicazione
NodeJs




//viene effettuata una richiesta GET all'endpoint '/books'
app.get('/books', (req, res) => {

    //current page
    const page = req.query.p || 0  // imposto page che corrispondera'a p all interno del path
    const booksPerPage = 3  //imposto il numero di libri per pagina che voglio visualizzare

    // Inizializza un array per memorizzare i libri
    let books = [];

    // Esegui la query per trovare i libri
    db.collection('books')
       .find()  
       .sort({ author: 1 }) // Ordina i risultati per autore in ordine crescente
       .skip(page * booksPerPage)
       .limit(booksPerPage)
       .toArray() // Correzione: usa toArray() per ottenere i risultati come array
       .then((results) => {
           // Aggiungi i risultati all'array books
           books = results; // Puoi assegnare direttamente i risultati a books
           res.status(200).json(books); // Invia i risultati come risposta JSON
       })
       .catch((err) => {
           console.error('Error fetching documents:', err); // Log dell'errore
           res.status(500).json({ error: 'Could not fetch the documents' }); // Risposta di errore
       });
});



//esempio di funzionamento della paginazione implementata con i metodi .skip() e  .limit()
//page = 0 e booksPerPage = 3
// 0 * 3  = salto 0 documenti e ne restituisco 3
// 1 * 3 = salto i primi 3 e restituisco i secondi 3 , e cosi' via
